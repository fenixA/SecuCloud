package control;

import java.security.*;
import java.io.*;
import javax.crypto.*;
import javax.crypto.spec.*;

public final class Crypt {
	public Crypt() {

	}

	public File encryptFile(File inputFile, String key) {
		File encryptedFile = null;
		if (key.length() != 16) {
			System.out.println("Error: Invalid key length!");
			return null;
		}
		try {
			encryptedFile = new File(inputFile.getAbsolutePath() + ".ecpt");
			FileInputStream fis;
			FileOutputStream fos;
			CipherInputStream cis;
			// Creation of Secret key
			
			SecretKeySpec secretKey = new SecretKeySpec(key.getBytes(), "AES");
			// Creation of Cipher objects
			Cipher encrypt = Cipher.getInstance("AES/ECB/PKCS5Padding",
					"SunJCE");
			encrypt.init(Cipher.ENCRYPT_MODE, secretKey);
			// Open the Plaintext file
			try {
				fis = new FileInputStream(inputFile);
				cis = new CipherInputStream(fis, encrypt);
				// Write to the Encrypted file
				fos = new FileOutputStream(encryptedFile);
				byte[] b = new byte[8];
				int i = cis.read(b);
				while (i != -1) {
					fos.write(b, 0, i);
					i = cis.read(b);
				}
				fos.flush();
				fos.close();
				cis.close();
				fis.close();
			} catch (IOException err) {
				System.out.println("Error: Cannot open file!");
				return null;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		return encryptedFile;
	}

	public File decryptFile() {
		File decryptedFile;

		return decryptedFile;
	}
}
