package control;

import java.security.*;
import java.io.*;
import javax.crypto.*;
import javax.crypto.spec.*;

public final class Crypt {
	public Crypt() {

	}

	public File encryptFile(File inputFile) {
		File encryptedFile = new File(input.getAbsolutePath() + ".crpt");
		FileInputStream fis;
		FileOutputStream fos;
		CipherInputStream cis;
		// Creation of Secret key
		String key = "MySEcRetKeY";
		int length = key.length();
		if (length > 16 && length != 16) {
			key = key.substring(0, 15);
		}
		if (length < 16 && length != 16) {
			for (int i = 0; i < 16 - length; i++) {
				key = key + "0";
			}
		}
		SecretKeySpec secretKey = new SecretKeySpec(key.getBytes(), "AES");
		// Creation of Cipher objects
		Cipher encrypt = Cipher.getInstance("AES/ECB/PKCS5Padding", "SunJCE");
		encrypt.init(Cipher.ENCRYPT_MODE, secretKey);
		// Open the Plaintext file
		fis = new FileInputStream(inputFile);
		cis = new CipherInputStream(fis, encrypt);
		// Write to the Encrypted file
		fos = new FileOutputStream(encryptedFile);
		byte[] b = new byte[8];
		int i = cis.read(b);
		while (i != -1) {
			fos.write(b, 0, i);
			i = cis.read(b);
		}
		fos.flush();
		fos.close();
		cis.close();
		fis.close();

		return encryptedFile;
	}

	public File decryptFile() {
		File decryptedFile;

		return decryptedFile;
	}
}
